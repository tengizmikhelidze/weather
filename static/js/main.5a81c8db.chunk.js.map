{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API","App","useState","weather","setWeather","city","setCity","newDate","Date","date","getDate","month","getMonth","year","getFullYear","weekDay","getDay","useEffect","tracCity","fetch","then","response","json","result","text","JSON","parse","cod","alert","className","main","temp","type","placeholder","onKeyPress","event","key","value","onChange","e","target","name","sys","country","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAEMA,G,MACC,sDAgHQC,MA9Gf,WAAe,MAEiBC,qBAFjB,mBAENC,EAFM,KAEGC,EAFH,OAGWF,qBAHX,mBAGNG,EAHM,KAGAC,EAHA,KAKTC,EAAU,IAAIC,KACdC,EAAOF,EAAQG,UACfC,EAAQJ,EAAQK,WAChBC,EAAON,EAAQO,cACfC,EAAUR,EAAQS,SACtB,OAAOD,GACL,KAAK,EAAGA,EAAU,SAChB,MACF,KAAK,EAAGA,EAAU,SAChB,MACF,KAAK,EAAGA,EAAU,UAChB,MACF,KAAK,EAAGA,EAAU,YAChB,MACF,KAAK,EAAGA,EAAU,WAChB,MACF,KAAK,EAAGA,EAAU,SAChB,MACF,KAAK,EAAGA,EAAU,YAChB,MACF,QAASA,EAAU,YAErB,OAAOJ,GACL,KAAK,EAAGA,EAAQ,UAAW,MAC3B,KAAK,EAAGA,EAAQ,WAAY,MAC5B,KAAK,EAAGA,EAAQ,QAAS,MACzB,KAAK,EAAGA,EAAQ,QAAS,MACzB,KAAK,EAAGA,EAAQ,MAAO,MACvB,KAAK,EAAGA,EAAQ,OAAQ,MACxB,KAAK,EAAGA,EAAQ,OAAQ,MACxB,KAAK,EAAGA,EAAQ,SAAU,MAC1B,KAAK,EAAGA,EAAQ,YAAa,MAC7B,KAAK,EAAGA,EAAQ,UAAW,MAC3B,KAAK,GAAIA,EAAQ,WAAY,MAC7B,KAAK,GAAIA,EAAQ,WAAY,MAC7B,QAASA,EAAQ,WAGnBM,qBAAU,WACRC,MACC,IAEH,IAkBMA,EAAW,WACfC,MAAM,0CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJJ,MAAM,+DAAD,OAAgEI,EAAOlB,KAAvE,iBAA4F,CAC/F,OAAU,MACV,QAAW,CACT,kBAAmB,4CACnB,iBAAiB,GAAjB,OAAqBL,MAGxBoB,MAAK,SAAAC,GAAQ,OAAGA,EAASG,UACzBJ,MAAK,SAAAG,GAC2B,OAA1BE,KAAKC,MAAMH,GAAQI,KACpBvB,EAAWqB,KAAKC,MAAMH,IAAUjB,EAAQ,MAEpCF,GAAW,GAAQwB,MAAM,oCAAqCtB,EAAQ,YAIpF,OACE,yBAAKuB,UAAS,wBAAmB1B,GAAWA,EAAQ2B,KAAKC,MAAO,GAAK,OAAQ,KACzE,yBAAKF,UAAU,eACX,yBAAKA,UAAU,cACX,2BAAOG,KAAK,OAAOC,YAAY,YAAYC,WA1C1C,SAACC,GACC,SAAZA,EAAMC,KACPjB,MAAM,+DAAD,OAAgEd,EAAhE,iBAAqF,CACxF,OAAU,MACV,QAAW,CACT,kBAAmB,4CACnB,iBAAiB,GAAjB,OAAqBL,MAGxBoB,MAAK,SAAAC,GAAQ,OAAGA,EAASG,UACzBJ,MAAK,SAAAG,GAC2B,OAA1BE,KAAKC,MAAMH,GAAQI,KACpBvB,EAAWqB,KAAKC,MAAMH,IAAUjB,EAAQ,MAEpCF,GAAW,GAAQwB,MAAM,oCAAqCtB,EAAQ,SA4BP+B,MAAOhC,EAAMiC,SAAU,SAACC,GAAD,OAAKjC,EAAQiC,EAAEC,OAAOH,WAEhH,yBAAKR,UAAU,mBACX,yBAAKA,UAAU,uBACb,2BAAK1B,EAAQ,GAAD,OAAKA,EAAQsC,KAAb,aAAsBtC,EAAQuC,IAAIC,SAAW,kBAE3D,yBAAKd,UAAU,mBACX,2BAAId,EAAU,KAAOJ,EAAQ,IAAKF,EAAK,KAAKI,IAEhD,yBAAKgB,UAAU,0BACX,2BAAI1B,EAASyC,KAAKC,MAAM1C,EAAQ2B,KAAKC,MAAO,MAA5C,YAEJ,yBAAKF,UAAU,sBACX,2BAAI1B,EAASA,EAAQA,QAAQ,GAAG2B,KAAK,UAArC,UC/FAgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a81c8db.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './App.css';\nconst API ={\n  key: '98abc46db0msh24d1c235fc82da8p1831d3jsnba34ca7ec11e'\n}\nfunction App() {\n  //State Hooks\n  const [weather, setWeather] = useState();\n  const [city, setCity] = useState();\n  //Get Date\n  let newDate = new Date();\n  let date = newDate.getDate();\n  let month = newDate.getMonth();\n  let year = newDate.getFullYear();\n  let weekDay = newDate.getDay();\n  switch(weekDay){\n    case 0: weekDay = 'Sunday';\n      break;\n    case 1: weekDay = 'Monday';\n      break; \n    case 2: weekDay = 'Tuesday';\n      break;\n    case 3: weekDay = 'Wednesday';\n      break;\n    case 4: weekDay = 'Thursday';\n      break;\n    case 5: weekDay = 'Friday';\n      break;\n    case 6: weekDay = 'Saturday ';\n      break;\n    default: weekDay = 'Error 404';\n  }\n  switch(month){\n    case 0: month = 'January'; break;\n    case 1: month = 'February'; break;\n    case 2: month = 'March'; break;\n    case 3: month = 'April'; break;\n    case 4: month = 'May'; break;\n    case 5: month = 'June'; break;\n    case 6: month = 'July'; break;\n    case 7: month = 'August'; break;\n    case 8: month = 'September'; break;\n    case 9: month = 'October'; break;\n    case 10: month = 'November'; break;\n    case 11: month = 'December'; break;\n    default: month = 'Eror 404';\n  }\n  //useeffect\n  useEffect(() => {\n    tracCity();\n  }, [])\n  // Search\n  const search = (event) =>{\n    if(event.key =='Enter') {\n      fetch(`https://community-open-weather-map.p.rapidapi.com/weather?q=${city}&units=metric`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n          \"x-rapidapi-key\": `${API.key}`\n        }\n      })\n      .then(response =>response.text())\n      .then(result => {\n          if(JSON.parse(result).cod == '200'){\n            setWeather(JSON.parse(result)); setCity('');\n          }\n          else {setWeather(false); alert(`Enter Valid city or country name`); setCity('')};\n      })\n    }\n  }\n  const tracCity = () => {\n    fetch('https://ipinfo.io?token=d20280b59069d7')\n    .then(response => response.json())\n    .then(result => {\n      fetch(`https://community-open-weather-map.p.rapidapi.com/weather?q=${result.city}&units=metric`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n          \"x-rapidapi-key\": `${API.key}`\n        }\n      })\n      .then(response =>response.text())\n      .then(result => {\n          if(JSON.parse(result).cod == '200'){\n            setWeather(JSON.parse(result)); setCity('');\n          }\n          else {setWeather(false); alert(`Enter Valid city or country name`); setCity('')};\n      })\n    })\n  }\n  return (\n    <div className={`whole-wrapper ${weather && weather.main.temp >=25 ? 'warm': ''}`}>\n        <div className=\"app-wrapper\">\n            <div className=\"search-bar\">\n                <input type=\"text\" placeholder=\"Search...\" onKeyPress={search} value={city} onChange={(e)=>setCity(e.target.value)}/>\n            </div>\n            <div className=\"weather-wrapper\">\n                <div className=\"location weater-box\">\n                  <p>{ weather? `${weather.name}, ${weather.sys.country}`: 'city, country' }</p> \n                </div>\n                <div className=\"date weater-box\">\n                    <p>{weekDay + ', ' + month + ' ' +date+', '+year}</p> \n                </div>\n                <div className=\"temperature weater-box\">\n                    <p>{weather? Math.round(weather.main.temp): 'NaN'} &#8451;</p> \n                </div>\n                <div className=\"weather weater-box\">\n                    <p>{weather? weather.weather[0].main:'Weather'} </p>\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}